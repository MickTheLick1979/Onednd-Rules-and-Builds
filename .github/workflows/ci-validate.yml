name: CI - Validate 2024 Data

on:
  workflow_dispatch:
  push:
    branches: ['**']
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  hygiene:
    name: Hygiene â€” no BOM, no CRLF
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run hygiene check
        run: python scripts/ci/hygiene_check.py

  validate:
    name: Validate ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: hygiene
    strategy:
      fail-fast: false
      matrix:
        target:
          - spell
          - index:spells_by_class_level

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py311-${{ hashFiles('requirements.lock', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py311-

      - id: runval
        name: Validate ${{ matrix.target }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "ci_out/${{ matrix.target }}"
          case "${{ matrix.target }}" in
            "spell")
              python scripts/phase9/validate_spell.py \
                --schemas "schema/2024/v1" \
                --baseline "rules/2024" \
                --out "ci_out/${{ matrix.target }}"
              ;;
            "index:spells_by_class_level")
              python scripts/phase9/validate_spells_by_class_level.py \
                --schemas "schema/2024/v1" \
                --baseline "rules/2024" \
                --mappings "rules/2024/mappings" \
                --indexes "indexes/2024" \
                --out "ci_out/${{ matrix.target }}"
              ;;
            *)
              echo "Unknown target: '${{ matrix.target }}'"; exit 2
              ;;
          esac

      - name: Write summary artifact
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          out="ci_out/${{ matrix.target }}"
          mkdir -p "$out"
          {
            echo "target=${{ matrix.target }}"
            echo "status=${{ steps.runval.outcome }}"
            echo "run_id=${{ github.run_id }}"
            echo "run_attempt=${{ github.run_attempt }}"
            echo "sha=${{ github.sha }}"
            echo "python=$(python --version 2>&1)"
            echo "pip=$(pip --version 2>&1)"
            date -u +"utc=%Y-%m-%dT%H:%M:%SZ"
          } > "$out/summary.txt"
      - name: Compute safe artifact name
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          # Sanitize target for artifact name: allow [A-Za-z0-9_.-], replace everything else with '-'
          SAFE="logs-$(printf "%s" "${{ matrix.target }}" | sed -E 's/[^A-Za-z0-9_.-]+/-/g')"
          echo "ART_NAME=$SAFE" >> "$GITHUB_ENV"
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ART_NAME }}
          path: ci_out/${{ matrix.target }}/**
          if-no-files-found: error
          retention-days: 7