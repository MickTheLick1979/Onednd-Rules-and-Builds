name: CI â€” Validate 2024 Data

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - action
          - background
          - backgroundFluff
          - baseitem
          - book
          - class
          - classFeature
          - classFluff
          - condition
          - feat
          - language
          - monster
          - optionalfeature
          - race
          - reward
          - spell
          - subclass
          - vehicle
          - index:spells_by_class_level
          - index:feats_by_prereq
          - index:subclass_features_by_level

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.lock ]; then
            pip install -r requirements.lock
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else:
            pip install "jsonschema>=4.21,<5"
          fi

      - name: Prepare reports directory
        shell: bash
        run: |
          mkdir -p reports/ci

      - name: Ensure validator entrypoint exists (shim if missing)
        shell: bash
        run: |
          if [ ! -f scripts/validate_repo.py ]; then
            echo "scripts/validate_repo.py not found; creating a SHIM that fails with rc=2 and writes an error report." >&2
            mkdir -p scripts
            cat > scripts/validate_repo.py << 'PYEOF'
#!/usr/bin/env python3
import argparse, json, sys, pathlib
ap = argparse.ArgumentParser()
ap.add_argument("--target", required=True)
ap.add_argument("--baseline", required=True)
ap.add_argument("--indexes", required=True)
ap.add_argument("--schema-root", required=True)
ap.add_argument("--out", required=True)
args = ap.parse_args()
p = pathlib.Path(args.out)
p.parent.mkdir(parents=True, exist_ok=True)
err = {
  "status": "error",
  "code": 2,
  "message": "Validator entrypoint missing. Please add scripts/validate_repo.py (Draft 2020-12).",
  "target": args.target,
  "expected_cmd": f'python scripts/validate_repo.py --target "{args.target}" --baseline "{args.baseline}" --indexes "{args.indexes}" --schema-root "{args.schema_root}" --out "{args.out}"'
}
p.write_text(json.dumps(err, indent=2), encoding="utf-8")
print(err["message"], file=sys.stderr)
sys.exit(2)
PYEOF
            chmod +x scripts/validate_repo.py
          fi

      - name: Run repo validator
        shell: bash
        run: |
          python scripts/validate_repo.py \
            --target "${{ matrix.target }}" \
            --baseline "rules/2024" \
            --indexes "indexes/2024" \
            --schema-root "schema/2024/v1" \
            --out "reports/ci/${{ matrix.target }}.json"

      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          path: reports/ci/
          if-no-files-found: warn
          retention-days: 7