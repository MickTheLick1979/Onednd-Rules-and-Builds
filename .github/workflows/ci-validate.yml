name: CI - Validate 2024 Data

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  hygiene:
    name: Hygiene — no BOM, no CRLF
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Enforce no UTF-8 BOM and LF-only line endings
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import subprocess, sys

          EXTS = {
              '.json','.schema.json','.jsonc','.json5',
              '.yml','.yaml',
              '.md','.txt',
              '.py','.ps1','.psm1','.psd1',
              '.ini','.cfg','.conf','.toml',
              '.csv','.tsv'
          }

          # Get tracked files
          out = subprocess.check_output(['git','ls-files','-z'])
          files = [p for p in out.decode('utf-8').split('\\x00') if p]

          def is_text(p: str) -> bool:
              lp = p.lower()
              return any(lp.endswith(ext) for ext in EXTS)

          bom = []
          crlf = []
          for p in files:
              if not is_text(p):
                  continue
              with open(p, 'rb') as f:
                  data = f.read()
              if data.startswith(b'\\xef\\xbb\\xbf'):
                  bom.append(p)
              if b'\\r\\n' in data:
                  crlf.append(p)

          if bom:
              print('::error title=BOM detected::The following files contain a UTF-8 BOM:')
              print('\\n'.join(bom))
              sys.exit(1)

          if crlf:
              print('::error title=CRLF detected::The following files contain CRLF line endings:')
              print('\\n'.join(crlf))
              sys.exit(1)

          print('Hygiene checks passed.')
          PY        shell: bash
        run: |
          set -euo pipefail
          echo "Scanning for UTF-8 BOM in tracked text files..."
          mapfile -t bom < <(git ls-files \
            '*.json' '*.schema.json' '*.yml' '*.yaml' '*.md' '*.txt' '*.py' '*.ps1' \
            | xargs -r grep -Il $'\xEF\xBB\xBF' || true)
          if (( ${#bom[@]} )); then
            echo "::error title=BOM detected::The following files contain a UTF-8 BOM:"
            printf '%s\n' "${bom[@]}"
            exit 1
          fi

          echo "Scanning for CRLF in tracked text files..."
          mapfile -t crlf < <(git ls-files \
            '*.json' '*.schema.json' '*.yml' '*.yaml' '*.md' '*.txt' '*.py' '*.ps1' \
            | xargs -r grep -Il $'\r' || true)
          if (( ${#crlf[@]} )); then
            echo "::error title=CRLF detected::The following files contain CRLF line endings:"
            printf '%s\n' "${crlf[@]}"
            exit 1
          fi

          echo "Hygiene checks passed."

  validate:
    name: Validate ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: hygiene
    strategy:
      fail-fast: false
      matrix:
        target:
          - spell
          - index:spells_by_class_level

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py311-${{ hashFiles('requirements.lock', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py311-

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.lock ]; then
            pip install -r requirements.lock
          else
            pip install -r requirements.txt
          fi

      - name: Validate ${{ matrix.target }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci_out
          case "${{ matrix.target }}" in
            "spell")
              python scripts/phase9/validate_spell.py \
                --schemas "schema/2024/v1" \
                --baseline "rules/2024" \
                --out "ci_out/spell"
              ;;

            "index:spells_by_class_level")
              python scripts/phase9/validate_spells_by_class_level.py \
                --schemas "schema/2024/v1" \
                --baseline "rules/2024" \
                --mappings "rules/2024/mappings" \
                --indexes "indexes/2024" \
                --out "ci_out/spells_by_class_level"
              ;;

            *)
              echo "Unknown target: '${{ matrix.target }}'"; exit 2
              ;;
          esac

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.target }}
          path: |
            ci_out/**
            !**/*.tmp

